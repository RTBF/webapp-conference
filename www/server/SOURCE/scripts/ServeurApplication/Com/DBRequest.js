// Generated by CoffeeScript 1.4.0
var DBRequest, db;

DBRequest = (function() {

  function DBRequest() {
    var _this = this;
    console.log("construction");
    this.mongoose = require('mongoose');
    this.Admin = require('../Models/Admin.js');
    this.Slide = require('../Models/Slide.js');
    this.Organisation = require("../Models/Organisation.js");
    this.Conference = require("../Models/Conference.js");
    this.async = require('async');
    this.dsn = "mongodb://localhost/WebConference";
    this.mongoose.connect(this.dsn);
    this.confDB = this.mongoose.connection;
    this.confDB.on('error', console.error.bind(console, 'connection error:'));
    this.confDB.once('open', function() {
      return _this.Admin.findOne({
        _id: '515c1b1950e5c6a674000001'
      }, function(err, admin) {
        console.log("please come here");
        if (err) {
          callback(err);
        }
      }).populate('organisations').exec(function(err, admin) {
        var organisation;
        console.log(organisation = JSON.stringify(admin.organisations));
        return console.log("premier log:", organisation);
      });
    });
    this.init();
  }

  DBRequest.prototype.init = function() {};

  DBRequest.prototype.readOrganisations = function(AdminId, callback) {
    var organisation,
      _this = this;
    organisation = null;
    console.log(AdminId);
    console.log("your are in");
    console.log(this.Admin.findOne);
    this.Admin.findOne({
      _id: AdminId
    }, function(err, admin) {
      console.log("please come here");
      if (err) {
        callback(err);
      }
    }).populate('organisations').exec(function(err, admin) {
      console.log(organisation = JSON.stringify(admin.organisations));
      return console.log("premier log:", organisation);
    });
    console.log("end of fonction");
    return console.log("fuck");
  };

  DBRequest.prototype.readConference = function(OrgId) {
    var Confs,
      _this = this;
    Confs = null;
    Organisation.findOne({
      _id: OrgId
    }, function(err, organisation) {
      if (err) {
        return console.log("error while trying to find the organisations of this admin");
      }
    }).populate('conferences').exec(function(err, organisation) {
      return Confs = JSON.stringify(organisation.conferences);
    });
    return Confs;
  };

  DBRequest.prototype.readSlideList = function(ConfId) {
    var slides,
      _this = this;
    slides = null;
    Conference.findOne({
      _id: ConfId
    }, function(err, conference) {
      if (err) {
        return console.log("error while trying to find the organisations of this admin");
      }
    }).populate('slides').exec(function(err, conference) {
      return slides = JSON.stringify(conference.slides);
    });
    return slides;
  };

  return DBRequest;

})();

db = new DBRequest;
