// Generated by CoffeeScript 1.4.0
/*class Serveur
  constructor: () ->

  init: ->
*/

var DBCom, app, express, io, server,
  _this = this;

express = require('express');

app = express();

server = require('http').createServer(app);

io = require('socket.io').listen(server);

server.listen(3000);

io.set('log level', 1);

io.set('transports', ['websocket', 'flashsocket', 'htmlfile', 'xhr-polling', 'jsonp-polling']);

DBCom = require('./DBCom.js');

io.sockets.on('connection', function(socket) {
  var brodcastSlide;
  console.log(socket.id);
  socket.on('slider', function(id) {
    DBCom.readSlideListForSlider(id, function(dbdata) {
      return socket.emit('sslides', dbdata);
    });
    return console.log('admin connected');
  });
  socket.on('reset', function(data) {
    console.log('admin asks for reseting');
    return socket.broadcast.emit('sreset', data);
  });
  socket.on('user', function(data) {
    DBCom.getOrgaList(function(dbdata) {
      return socket.emit('organisations', dbdata);
    });
    return console.log('user connected');
  });
  socket.on('organisationChoosed', function(id) {
    return DBCom.readConference(id, function(dbdata) {
      return socket.emit('conferences', dbdata);
    });
  });
  socket.on('conferenceChoosed', function(id) {
    console.log('conf choosed', id);
    socket.join(id);
    return DBCom.readSlideList(id, function(dbdata) {
      return socket.emit('slides', dbdata);
    });
  });
  socket.on('send', function(data) {
    return DBCom.readSlideToSend(data._id, function(dbdata) {
      DBCom.setSent(true, data._id);
      socket.emit('snext', data);
      return brodcastSlide('snext', dbdata);
    });
  });
  socket.on('remove', function(data) {
    return DBCom.readSlideToSend(data._id, function(dbdata) {
      DBCom.setSent(false, data._id);
      socket.emit('sremove', data);
      return brodcastSlide('sremove', dbdata);
    });
  });
  return brodcastSlide = function(message, data) {
    console.log(data._conf);
    return io.sockets["in"](data._conf).emit(message, data);
  };
});

console.log('Serveur lanc√©');
